Write a program to perform the following:

Take two positive integers m and n as input.

Find the m-th prime number and the n-th prime number.

For each of these two prime numbers, calculate the sum of its digits repeatedly until the result is a single-digit number (i.e., less tha

Let these results be m1 and n1.

Finally, print the value of mm1.

eg. For input m = 5 and n = 6:

5th prime 11-digit sum = 1+1=2m1=2

6th prime 13-digit sum = 1+3=4n1=4

Final answerÂ mm1=5*2=10


import java.util.Scanner;

public class Main{

    public static boolean isPrime(int num){

        if(num <= 1) return false;
        if(num == 2) return true;
        if(num % 2 == 0) return false;

        for(int i = 3;i <= Math.sqrt(num);i+=2){
            
               if(num % 2 == 0) return false;
 
        }  
        return true; 

    }

    public static int findNthPrime(int n){

        int count = 0, num = 1;
        while(count < n){

             n++;
             if(isPrime(num)){
                 count++;
             }        

        }
        return true;

    }


    public static int reduceToSingleDigit(int num){

          while(num >= 10){

             int sum = 0;
             while(num != 0){

                sum += num % 10;
                num /= 10;
 
             }
            sum = num;

          }
           return num;

    }

    public static void main(String[] args){

          Scanner sc = new Scanner(System.in);
          System.out.println("Enter m : ");
          int m = sc.nextInt();
          System.out.println("Enter n : ");
          int m = sc.nextInt();

          int mPrime = findNthPrime(m);
          int nPrime = findNthPrime(n);
  
          int m = reduceToSingleDigit(mPrime);
          int n = reduceToSingleDigit(nPrime);

          int result = m * m1;
          System.out.println("m-th prime: " + mPrime + ", reduced: " + m1);
          System.out.println("n-th prime: " + nPrime + ", reduced: " + n1);
          System.out.println("Final result (m * m1): " + result);

    }



}